<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaScript内存管理</title>
      <link href="2019/10/22/javaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>2019/10/22/javaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么样的代码是好代码</title>
      <link href="2019/10/18/%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/"/>
      <url>2019/10/18/%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/18/MqTuGLp7NoRXIrS.png" alt="carbon _1_.png"></p><p>我认为的好代码，至少要具备以下条件：</p><a id="more"></a><ul><li>可读性， 我们要有一个信念：代码是给人看的，顺便在机器上运行一下</li><li>高复用低耦合，这样文件小，好维护，而且好扩展。</li><li>具有可用性、健壮性、可靠性、宽容性，能够处理可预见的异常情况</li><li>满足单一职责原则，一个组件或者一个类，只做一件事情</li><li>满足开放-封闭原则，写好了一个可复用的代码后，需要对扩展开放，对修改封闭</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>golang输出内容到指定文件</title>
      <link href="2019/09/23/golang%E8%BE%93%E5%87%BA%E5%86%85%E5%AE%B9%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
      <url>2019/09/23/golang%E8%BE%93%E5%87%BA%E5%86%85%E5%AE%B9%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>使用 go 语言实现输出内容到指定文件</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">string</span> += (<span class="string">"&lt;div&gt;"</span>+ strconv.Itoa(i) + <span class="string">"&lt;/div&gt;\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="keyword">string</span>)</span><br><span class="line">  ioutil.WriteFile(<span class="string">"file.html"</span>,data,os.ModeAppend)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是函数式编程</title>
      <link href="2019/09/11/%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2019/09/11/%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/09/11/ENVmMaCdpzGS1wK.jpg" alt="bg2017022201.jpg"></p><p>我一直听说过函数式编程，也可能在无形中使用函数式编程。但是，函数式编程的定义到底是什么，在我心中一直没有一个明确的概念，本文就对函数式编程来一个深度的研究。</p><a id="more"></a><p>函数</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Node开发一个命令行工具</title>
      <link href="2019/09/09/%E4%BD%BF%E7%94%A8Node%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
      <url>2019/09/09/%E4%BD%BF%E7%94%A8Node%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>最近在深入研究 JavaScript 的正则表达式，阅读了老姚的<a href="https://zhuanlan.zhihu.com/p/29707385" target="_blank" rel="noopener">《JavaScript 正则表达式迷你书》</a>，受益匪浅。关于正则表达式的知识，老姚在这本书中讲解的很透彻，推荐大家去阅读。本着学习和分享的态度，我希望我有体系地整理一些经典的使用正则表达式的场景，并集成为一套题库，提供给大家。想着如果以单纯的文档形式提供给大家，大家看的会枯燥，因此最终决定开发一个命令行工具，增加大家的 geek 乐趣。</p><a id="more"></a><p>本文会简单介绍，使用 node 开发命令行工具的基本原理，后续会推出自己开发的命令行工具。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>koa2的洋葱模型实现原理</title>
      <link href="2019/08/30/koa2%E7%9A%84%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>2019/08/30/koa2%E7%9A%84%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>原先对 koa 的认知停留在使用上面，最近在阅读 koa2 的源码，发现 koa2 的洋葱模型实现原理很简单，核心代码在 koa-compose 里面，竟然只有几十行：</p><a id="more"></a><p><img src="https://i.loli.net/2019/08/30/iXJSKjHFETf81yn.png" alt="koa.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>));</span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i];</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next;</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，compose 函数，负责处理注册的所有中间件，我们使用以下方式注册中间件（middleware）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么，koa2 是如何处理注册的中间件，并实现它的洋葱模型呢？<br>koa2 会将注册的所有中间件函数，放在数组 middleware 中，使用 koa-compose,处理 moddleware 这个数组。</p><p>下面就是对 compose 函数的解析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  容错判断，如果middleware不是数组，或者元素不是函数，则抛异常</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compose函数最终返回一个闭包函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 使用递归操作，将各个function作为前一个function的next参数传递过去</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>));</span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i];</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next;</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v-if和v-show的区别</title>
      <link href="2019/08/12/v-if%E5%92%8Cv-show%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2019/08/12/v-if%E5%92%8Cv-show%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>v-if</strong> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><strong>v-if</strong> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<strong>v-show</strong> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<strong>v-if</strong> 有更高的切换开销，而 <strong>v-show</strong> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <strong>v-show</strong> 较好；如果在运行时条件很少改变，则使用 <strong>v-if</strong> 较好。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之代理模式</title>
      <link href="2019/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p><a id="more"></a><h2 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h2><p>不用代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receiveFlower(flower);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到花 '</span> + flower);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(A);</span><br></pre></td></tr></table></figure><p>引入代理 B:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receiveFlower(flower);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    A.receiveFlower(flower);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到花 '</span> + flower);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receiveFlower(flower);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    A.listenGoodMood(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 监听A的好心情</span></span><br><span class="line">      A.receiveFlower(flower);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到花 '</span> + flower);</span><br><span class="line">  &#125;,</span><br><span class="line">  listenGoodMood: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 假设10秒之后A的心情变好</span></span><br><span class="line">      fn();</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><h2 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h2><p>虽然这只是个虚拟的例子，但我们可以从中找到两种代理模式的身影。代理 B 可以帮助 A 过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理 B 处被拒绝掉。这种代理叫作保护代理。A 和 B 一个充当白脸，一个充当黑脸。白脸 A 继续保持良好的女神形象，不希望直接拒绝任何人，于是找了黑脸 B 来控制对 A 的访问。</p><p>另外，假设现实中的花价格不菲，导致在程序世界里，new Flower 也是一个代价昂贵的操作，那么我们可以把 new Flower 的操作交给代理 B 去执行，代理 B 会选择在 A 心情好时再执行 new Flower，这是代理模式的另一种形式，叫作虚拟代理。虚拟代理把一些开销很大的对象，延迟到真正需要它的时候才去创建。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    A.listenGoodMood(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 监听A的好心情</span></span><br><span class="line">      <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower(); <span class="comment">// 延迟创建flower 对象</span></span><br><span class="line">      A.receiveFlower(flower);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>保护代理用于控制不同权限的对象对目标对象的访问，但在 JavaScript 并不容易实现保护代理，因为我们无法判断谁访问了某个对象。而虚拟代理是最常用的一种代理模式，本文主要讨论的也是虚拟代理。</p><h2 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h2><p>在 Web 开发中，图片预加载是一种常用的技术，如果直接给某个 img 标签节点设置 src 属性， 由于图片过大或者网络不佳，图片的位置往往有段时间会是一片空白。常见的做法是先用一张 loading 图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到 img 节点里，这种场景就很适合使用虚拟代理。</p><p>下面我们来实现这个虚拟代理，首先创建一个普通的本体对象，这个对象负责往页面中创建一个 img 标签，并且提供一个对外的 setSrc 接口，外界调用这个接口，便可以给该 img 标签设置 src 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  vat imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc:<span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">      imgNode = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>现在开始引入代理对象 proxyImage，通过这个代理对象，在图片被真正加载好之前，页面中将出现一张占位的菊花图 loading.gif, 来提示用户图片正在加载。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = src;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myImage.setSrc(<span class="keyword">this</span>.src);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      myImage.setSrc(<span class="string">'file:// /C:/Users/svenzeng/Desktop/loading.gif'</span>);</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">'http:// imgcache.qq.com/music/photo/k/000GGDys0yA0Nk.jpg'</span>);</span><br></pre></td></tr></table></figure><p>现在我们通过 proxyImage 间接地访问 MyImage。proxyImage 控制了客户对 MyImage 的访问，并且在此过程中加入一些额外的操作，比如在真正的图片加载好之前，先把 img 节点的 src 设置为一张本地的 loading 图片。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式</title>
      <link href="2019/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> googleMap = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染谷歌地图'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baiduMap = &#123;</span><br><span class="line">  display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染百度地图'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baiduMapAdapter = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> baiduMap.display();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (map.show <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    map.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">renderMap(googleMap); <span class="comment">// 输出：开始渲染谷歌地图</span></span><br><span class="line">renderMap(baiduMapAdapter); <span class="comment">// 输出：开始渲染百度地图</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>适配器模式是一对相对简单的模式。在本书提到的设计模式中，有一些模式跟适配器模式的结构非常相似，比如装饰者模式、代理模式和外观模式（参见第 19 章）。这几种模式都属于“包装模式”，都是由一个对象来包装另一个对象。区别它们的关键仍然是模式的意图。</p><ul><li><p>适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来可能会如何演化。适配器模式不需要改变已有的接口，就能够使它们协同作用。</p></li><li><p>装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。</p></li><li><p>外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之观察者模式</title>
      <link href="2019/07/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/07/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>观察者模式，又称发布-订阅模式。它定义了对象之间的一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p><a id="more"></a><h2 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> salesOffices = &#123;&#125;; <span class="comment">// 定义售楼处</span></span><br><span class="line">salesOffices.clientLists = []; <span class="comment">// 缓存列表，存放订阅者的回调函数</span></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加订阅者</span></span><br><span class="line">  <span class="keyword">this</span>.clientLists.push(fn);</span><br><span class="line">&#125;;</span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 发布消息</span></span><br><span class="line">  <span class="keyword">this</span>.clientLists.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, area</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1号订阅者</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1号'</span> + price + <span class="string">''</span> + area);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, area</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 2号订阅者</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2号'</span> + price + <span class="string">''</span> + area);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="number">20000</span>, <span class="number">88</span>);</span><br></pre></td></tr></table></figure><p>让订阅者只订阅自己感兴趣的消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> salesOffices = &#123;&#125;;</span><br><span class="line">salesOffices.clientList = &#123;&#125;;</span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.clientList[key].push(fn);</span><br><span class="line">&#125;;</span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> fns = <span class="keyword">this</span>.clientsList[key];</span><br><span class="line">  fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    fn.apply(<span class="keyword">this</span>.arguments);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line">salesOffices.listen(<span class="string">'88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.trigger(<span class="string">'88'</span>, <span class="number">20000</span>);</span><br></pre></td></tr></table></figure><h2 id="发布-订阅模式的通用实现"><a href="#发布-订阅模式的通用实现" class="headerlink" title="发布-订阅模式的通用实现"></a>发布-订阅模式的通用实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event = &#123;</span><br><span class="line">  clientList: [],</span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList.push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line">    fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个installEvent函数，可以给对象动态安装发布-订阅功能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">    obj[i] = event[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">installEvent(salesOffices);</span><br><span class="line">salesOffices.listen(<span class="string">'88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.trigger(<span class="string">'88'</span>, <span class="number">20000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="2019/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/07/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>根据不同的参数，命中不同的策略。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strategies = &#123;</span><br><span class="line">    <span class="string">'S'</span>:<span class="function"><span class="keyword">function</span> (<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'A'</span>:<span class="function"><span class="keyword">function</span> (<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'B'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'A'</span>,<span class="number">10000</span>));</span><br></pre></td></tr></table></figure><p>通过使用策略模式，可以消除大片的条件分支语句。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="2019/07/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/07/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><a id="more"></a></p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>全局唯一的登录框</p><h2 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.instance)&#123;</span><br><span class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instanceA = Singleton.getInstance(<span class="string">'instanceA'</span>);</span><br><span class="line"><span class="keyword">const</span> instanceB = Singleton.getInstance(<span class="string">'instanceB'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instanceA === instanceB) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>缺点： 类不透明，使用者必须知道这是一个单例类。而且不是通过new 生成实例。</p><h2 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> CreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">let</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离模式下的接口管理实践</title>
      <link href="2019/07/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
      <url>2019/07/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介：本文分析了前后端分离开发模式下，由于接口交互，导致的前后端不能同步开发的问题，以及提出了一种综合解决方案，优化接口交互流程，提高开发效率。</p></blockquote><a id="more"></a><p>目前，随着 MVVM 框架的广泛应用，前后端分离的开发模式越来越得到广大开发者的青睐。前后端分离开发，就是后端人员负责写后台业务逻辑，前端人员通过 webpack 等打包工具，开发前端页面，两者通过接口来交换数据。页面由前端根据接口数据来进行渲染，而不是通过后端来渲染。</p><p>这种开发模式，可以使前后端并行开发，各司其职，既提高了项目总体的开发效率，也让不同的角色发挥自己的特长，前后端人员更专注于自己的职责，项目总体质量也能得到提高。</p><h2 id="前后端通过接口交互，有哪些问题？"><a href="#前后端通过接口交互，有哪些问题？" class="headerlink" title="前后端通过接口交互，有哪些问题？"></a>前后端通过接口交互，有哪些问题？</h2><h3 id="问题-1：依赖后端接口，前端无法独立开发"><a href="#问题-1：依赖后端接口，前端无法独立开发" class="headerlink" title="问题 1：依赖后端接口，前端无法独立开发"></a><span style="color:#d35400">问题 1：依赖后端接口，前端无法独立开发</span></h3><p>分离后，前后端沟通的最重要一个环节是接口交互。假定有一个需求，开发一个显示用户信息的页面。在后端提供接口之前，前端是不知道后端的接口会返回什么格式的数据，不知道以哪个字段来获取需要的数据，因此，前端无法开发页面的逻辑，特别是现在的 MVVM 框架，由数据驱动页面，在没有数据的情况下，前端工作的进度会取决于后端提供接口的进度，违背了前后端分离开发的愿景。</p><h3 id="问题-2：后端提供接口文档，前端需要写模拟数据"><a href="#问题-2：后端提供接口文档，前端需要写模拟数据" class="headerlink" title="问题 2：后端提供接口文档，前端需要写模拟数据"></a><span style="color:#d35400">问题 2：后端提供接口文档，前端需要写模拟数据</span></h3><p>在后端提供接口文档以后，假定文档定义获取用户信息的接口如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口路径： /getUserInfo</span></span><br><span class="line"><span class="comment">// 接口参数：</span></span><br><span class="line">&#123;</span><br><span class="line">  id: <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">  <span class="string">"id"</span>:<span class="number">123</span>,</span><br><span class="line">  <span class="string">"role"</span>:<span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到上述文档后，由于此时后端还没有开发对应的接口，导致前端无法连接后端服务器，获取数据。这时候，前端为了写逻辑，由于接口无法调通，只能自己依据接口文档，构造模拟数据。等到联调阶段，还需要把构造的模拟数据删掉，这些构造的模拟数据，上线后是完全没用的，这就是一种工作量的浪费。</p><h3 id="问题-3：后端做接口测试，需要依赖-postman-等测试工具"><a href="#问题-3：后端做接口测试，需要依赖-postman-等测试工具" class="headerlink" title="问题 3：后端做接口测试，需要依赖 postman 等测试工具"></a><span style="color:#d35400">问题 3：后端做接口测试，需要依赖 postman 等测试工具</span></h3><p>当后端开发，完成了一个接口后，需要对接口做接口测试。如果这时候页面还没有完成，后端只能依据接口文档，在 postman 上面构造模拟数据，然后通过 postman 调用自己的接口，查看返回的数据。通过对比返回的数据和接口文档定义的返回数据，知道自己的后端是否按照文档返回了数据。这个过程中，在 postman 上定义模拟数据是一种工作量，人眼对比数据，也是一种工作量，开发效率大大降低。</p><h3 id="问题-4：接口是否已经完成，接口是否有问题，需要前后端频繁沟通"><a href="#问题-4：接口是否已经完成，接口是否有问题，需要前后端频繁沟通" class="headerlink" title="问题 4：接口是否已经完成，接口是否有问题，需要前后端频繁沟通"></a><span style="color:#d35400">问题 4：接口是否已经完成，接口是否有问题，需要前后端频繁沟通</span></h3><p>由于接口文档更新不及时，以及无法保证团队的每一个成员手上的接口文档都是最新版本，甚至是，实际开发过程中接口已经变化，但是没有更新文档，只是口头交流，都会导致团队成员开发或者沟通出错，导致返工的问题，甚至是引起团队矛盾：<strong>为什么接口变化了不通知我？</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="接口管理平台的诞生"><a href="#接口管理平台的诞生" class="headerlink" title="接口管理平台的诞生"></a><span style="color:#d35400">接口管理平台的诞生</span></h3><p>为了解决接口文档不能够实时更新的问题，可以开发一个接口管理平台，在平台内定义每个接口的请求体和响应体等信息，当接口需要变更时，直接在平台上面更改。同时这个平台记录每个接口的变更日志，方便回滚和查看变更了哪些内容。</p><p>如果企业内部有通讯工具，可以继承内部通讯工具，当接口被更改了之后，自动向团队成员发送通知，告知更改了哪些内容，这样，可以保证团队内所有文档都是最新的。</p><p>同时，该平台需要支持导出接口文档的功能，因为很多团队需要电子文档做备份。不过，这只是一个无关紧要的功能。这个平台应该追求一个目标：可以在这换一个平台上，完成接口的所有生命周期的管理。</p><h3 id="接口的生命周期管理"><a href="#接口的生命周期管理" class="headerlink" title="接口的生命周期管理"></a><span style="color:#d35400">接口的生命周期管理</span></h3><p>有了接口在线管理，就可以对接口进行生命周期管理，比如这个接口是已定义阶段，还是待联调阶段，还是已完成阶段，都可以标注出来。接口的状态一目了然。</p><h3 id="接口的模拟响应和请求"><a href="#接口的模拟响应和请求" class="headerlink" title="接口的模拟响应和请求"></a><span style="color:#d35400">接口的模拟响应和请求</span></h3><p>这个平台拥有了接口的所有数据，就可以依照接口的定义，返回模拟数据。这样，将所有接口部署在这个平台上，生成一个模拟的 baseurl，前端工程将所有接口请求反向代理到这个地址，就可以获取到模拟数据，并进行相应逻辑的开发。此时，前端在不依赖后端的情况下，就可以完成开发工作。</p><p>针对后端，如果需要测试自己的接口，可以在页面上点击测试按钮，由浏览器发送请求，平台显示响应的数据。同时，因为接口平台已经有了返回数据的定义，获取到实际接口数据后，接口管理平台可以进行结构对比，并给出提示，这样，后端同学就很容易知道自己的接口到底对不对了。</p><h3 id="跨域问题的解决"><a href="#跨域问题的解决" class="headerlink" title="跨域问题的解决"></a><span style="color:#d35400">跨域问题的解决</span></h3><p>针对上文提出的接口模拟请求，是有一个问题的，当用户在接口管理平台上点击测试时，如果页面直接请求用户的服务器，会存在跨域问题。</p><p>一种解决方案是，页面将请求数据发送给接口管理平台的后台服务器，由后台服务器代为发送请求，然后，将获取到的数据返回给页面，在用户感知上，是页面直接发送了请求。</p><p>但是，虽然上述方案规避了跨域问题，但是没法获取到目标服务器的 cookie，导致依赖 cookie 的 web 程序，可能出现问题。</p><p>这就引出了另外一种方案：chrome 插件。</p><h3 id="chrome-插件的诞生"><a href="#chrome-插件的诞生" class="headerlink" title="chrome 插件的诞生"></a><span style="color:#d35400">chrome 插件的诞生</span></h3><p>上文提出，当用户在 A 系统页面上发送请求时，无法读取 B 系统里面的 Cookie，可能导致系统运行出错。</p><p>有没有一种方案，可以获取到所有系统的 cookie 呢？答案是有的，就是使用 chrome 插件。</p><p>chrome 插件是对浏览器功能的扩展，允许用户自己编写插件，对 chrome 功能进行扩充，同时，chrome 插件不存在跨域问题，它可以读取到任何页面的任何信息。对于 chrome 插件的开发，这里不做赘述。</p><p>因此，我们可以开发一个 chrome 插件，当用户点击测试按钮是，由插件代为发送请求，插件获取到响应数据后，将数据返回给页面展示。</p><p>至此，还剩下最后一个问题：接口联调。</p><h3 id="接口联调"><a href="#接口联调" class="headerlink" title="接口联调"></a><span style="color:#d35400">接口联调</span></h3><p>当前后端开发完成以后，需要进行前后端联调，通常这时候，需要前端直连后端的服务器，或者前端将页面打包给后端进行部署，费时又费力，而且，这得建立在所有接口已经开发完的情况才能这样做，否则页面很容易就报接口错误。</p><p>既然我们已经维护了接口状态，那么我们就可以在接口管理平台上做接口联调。</p><p>比如，我们在接口管理平台上管理了接口 A，它的信息如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口路径： /getUserInfo</span></span><br><span class="line"><span class="comment">// 接口参数：</span></span><br><span class="line"><span class="comment">// 反向代理地址： http://xx.com（该地址为接口管理平台生成的地址）</span></span><br><span class="line"><span class="comment">// 后端服务器地址： http://back.com（该地址为后端同学的服务器地址）</span></span><br><span class="line">&#123;</span><br><span class="line">  id: <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">  <span class="string">"id"</span>:<span class="number">123</span>,</span><br><span class="line">  <span class="string">"role"</span>:<span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工作流如下:</p><ol><li>前端工程反向代理到 <a href="http://xx.com" target="_blank" rel="noopener">http://xx.com</a></li><li>前端请求接口： /getUserInfo,并发送数据{id:123}</li><li>接口管理平台接到前端工程的请求，匹配到对应的接口，并查询接口状态</li><li><p>如果接口状态为待开发阶段，则查询定义的模拟数据，并返回该数据。即，返回以下数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">  <span class="string">"id"</span>:<span class="number">123</span>,</span><br><span class="line">  <span class="string">"role"</span>:<span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果接口状态为已完成阶段，则由接口管理平台转发该请求到<a href="http://back.com（后端同学的地址），接口管理平台获取到数据后，将数据返回给前端工程，包括请求头部等信息。" target="_blank" rel="noopener">http://back.com（后端同学的地址），接口管理平台获取到数据后，将数据返回给前端工程，包括请求头部等信息。</a></p></li></ol><p>至此，整个流程已经走通。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>目前，多家公司推出了自己的接口管理工具，但是，每一家公司的产品或多或少有些不完善的地方，对此，我做了一些调研，供大家参考：<br><a href="https://i.loli.net/2019/07/03/5d1c00231349218951.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/03/5d1c00231349218951.png" alt="竞品对比.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 Cookie 隔离？</title>
      <link href="2019/06/23/%E4%BB%80%E4%B9%88%E6%98%AFCookie%E9%9A%94%E7%A6%BB/"/>
      <url>2019/06/23/%E4%BB%80%E4%B9%88%E6%98%AFCookie%E9%9A%94%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>本文介绍什么是 Cookie 隔离，以及为什么要做 cookie 隔离。</p><a id="more"></a><p>如果静态文件都放在主域名下，那静态文件请求的时候都带有的 cookie 的数据提交给 server 的，非常浪费流量，<br>所以不如隔离开。</p><p>因为 cookie 有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有 cookie 数据，<br>这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</p><p>同时这种方式不会将 cookie 传入 Web Server，也减少了 Web Server 对 cookie 的处理分析环节，<br>提高了 webserver 的 http 请求的解析速度。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令汇总</title>
      <link href="2019/06/08/git19/"/>
      <url>2019/06/08/git19/</url>
      
        <content type="html"><![CDATA[<p>本文记录常用的 git 命令，方便后续回顾和查询。</p><p>本文命令参考了网站<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p><a id="more"></a><h2 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h2><h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><blockquote><blockquote><p>git 会将当前版本与仓库中上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。<br>我们可以把提交记录看作是项目的快照</p></blockquote></blockquote><h4 id="1-git-comit"><a href="#1-git-comit" class="headerlink" title="1. git comit"></a>1. git comit</h4><pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">commit</span></span><br><span class="line">git <span class="keyword">commit</span> -m message</span><br></pre></td></tr></table></figure></code></pre><blockquote><blockquote><p>早建分支，多用分支</p></blockquote></blockquote><h3 id="2-git-branch"><a href="#2-git-branch" class="headerlink" title="2. git branch "></a>2. git branch <name></name></h3><h3 id="3-git-checkout"><a href="#3-git-checkout" class="headerlink" title="3. git checkout "></a>3. git checkout <name></name></h3><p>切换分支</p><h3 id="4-git-checkout-b"><a href="#4-git-checkout-b" class="headerlink" title="4. git checkout -b "></a>4. git checkout -b <name></name></h3><p>快捷创建并切换分支</p><h3 id="5-git-merge"><a href="#5-git-merge" class="headerlink" title="5. git merge"></a>5. git merge</h3><p>相当于生成一个新的提交记录，这个记录会有两个父节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="keyword">master</span> <span class="title">feature</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git <span class="keyword">merge</span> <span class="keyword">master</span></span><br></pre></td></tr></table></figure><h3 id="6-git-rebase"><a href="#6-git-rebase" class="headerlink" title="6. git rebase"></a>6. git rebase</h3><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。Rebase 的优势就是可以创造更线性的提交历史,如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git chekout bugFix</span><br><span class="line">git rebase <span class="keyword">master</span> <span class="title">// 此时master</span>的指针还停留在原先的节点</span><br><span class="line">git rebase bugFix</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>在本地创建一个远程仓库的拷贝</p><p>当使用 git 时，远程仓库默认为 origin</p><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p>相当于单纯的下载，并不会更新本地文件</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>相当于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git <span class="keyword">merge</span> origin/<span class="keyword">master</span></span><br></pre></td></tr></table></figure><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><h3 id="与远程合并提交"><a href="#与远程合并提交" class="headerlink" title="与远程合并提交"></a>与远程合并提交</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git rebase origin/<span class="literal">master</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge origin/<span class="literal">master</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull // 相当于git fetch  git merge origin/<span class="literal">master</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase // 相当于git fetch  git rebase origin/<span class="literal">master</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>优点：</p><ul><li>提交树更干净，所有的提交都在一条线上</li></ul><p>缺点：</p><ul><li>rebase 修改了提交树的历史</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通用技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql-常用语句汇总</title>
      <link href="2019/05/23/sql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%E6%B1%87%E6%80%BB/"/>
      <url>2019/05/23/sql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>本文列举常用 sql 语句方便后续学习和回顾</p><a id="more"></a><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tableName</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">SELECT</span> <span class="keyword">name</span>, age <span class="keyword">FROM</span> Persons</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>  列名称 <span class="keyword">FROM</span> 表名称</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。</span></span><br><span class="line"><span class="number">5.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City=<span class="string">'Beijing'</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname=<span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname=<span class="string">'Carter'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> (FirstName=<span class="string">'Thomas'</span> <span class="keyword">OR</span> FirstName=<span class="string">'William'</span>) <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ORDER BY 语句默认按照升序对记录进行排序。</span></span><br><span class="line"><span class="number">9.</span> <span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）</span></span><br><span class="line"><span class="number">10.</span> <span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company, OrderNumber</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以逆字母顺序显示公司名称</span></span><br><span class="line"><span class="number">11.</span> <span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以逆字母顺序显示公司名称，并以数字顺序显示顺序号</span></span><br><span class="line"><span class="number">12.</span> <span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT INTO 语句用于向表格中插入新的行</span></span><br><span class="line"><span class="number">13.</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名称 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (列<span class="number">1</span>, 列<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br><span class="line"></span><br><span class="line"><span class="number">15.</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons <span class="keyword">VALUES</span> (<span class="string">'Gates'</span>, <span class="string">'Bill'</span>, <span class="string">'Xuanwumen 10'</span>, <span class="string">'Beijing'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'Wilson'</span>, <span class="string">'Champs-Elysees'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Update 语句用于修改表中的数据</span></span><br><span class="line"><span class="number">17.</span> <span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 = 新值 <span class="keyword">WHERE</span> 列名称 = 某值</span><br><span class="line"></span><br><span class="line"><span class="number">18.</span> <span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> FirstName = <span class="string">'Fred'</span> <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新某一行中的若干列</span></span><br><span class="line"><span class="number">19.</span> <span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> Address = <span class="string">'Zhongshan 23'</span>, City = <span class="string">'Nanjing'</span> <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE 语句用于删除表中的行</span></span><br><span class="line"><span class="number">20.</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 = 值</span><br><span class="line"></span><br><span class="line"><span class="number">21.</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的</span></span><br><span class="line"><span class="number">22.</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="number">23.</span> <span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="number">24.</span> <span class="keyword">SELECT</span> column_name(s)</span><br><span class="line">    <span class="keyword">FROM</span> table_name</span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="number">25.</span> <span class="keyword">SELECT</span> *</span><br><span class="line">    <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">26.</span> <span class="keyword">SELECT</span> column_name(s)</span><br><span class="line">    <span class="keyword">FROM</span> table_name</span><br><span class="line">    <span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> pattern</span><br><span class="line"></span><br><span class="line"><span class="number">27.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'N%'</span></span><br><span class="line"></span><br><span class="line"><span class="number">28.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'%g'</span></span><br><span class="line"></span><br><span class="line"><span class="number">29.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'%lon%'</span></span><br><span class="line"></span><br><span class="line"><span class="number">30.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">WHERE</span> City <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'%lon%'</span></span><br><span class="line"></span><br><span class="line"><span class="number">31.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">WHERE</span> FirstName <span class="keyword">LIKE</span> <span class="string">'_eorge'</span></span><br><span class="line"></span><br><span class="line"><span class="number">32.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line">    <span class="keyword">WHERE</span> LastName <span class="keyword">LIKE</span> <span class="string">'C_r_er'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 现在，我们希望从上面的 "Persons" 表中选取居住的城市以 "A" 或 "L" 或 "N" 开头的人</span></span><br><span class="line"><span class="number">33.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'[ALN]%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我们希望从上面的 "Persons" 表中选取居住的城市不以 "A" 或 "L" 或 "N" 开头的人</span></span><br><span class="line"><span class="number">34.</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">'[!ALN]%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN 操作符允许我们在 WHERE 子句中规定多个值</span></span><br><span class="line"><span class="number">35.</span> <span class="keyword">SELECT</span> column_name(s)</span><br><span class="line">    <span class="keyword">FROM</span> table_name</span><br><span class="line">    <span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1,value2,...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我们希望从上表中选取姓氏为 Adams 和 Carter 的人</span></span><br><span class="line"><span class="number">36.</span><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> LastName <span class="keyword">IN</span> (<span class="string">'Adams'</span>,<span class="string">'Carter'</span>)</span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr></tbody></table><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>%</td><td>替代一个或多个字符</td></tr><tr><td>_</td><td>仅替代一个字符</td></tr><tr><td>[charlist]</td><td>字符列中的任何单一字符</td></tr><tr><td>[^charlist]或者[!charlist]</td><td>不在字符列中的任何单一字符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript的错误处理机制</title>
      <link href="2019/05/13/javascript%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>2019/05/13/javascript%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>本文介绍 js 的错误处理方式以及 try{…}catch(e){…}finally{…}的使用方法。</p><a id="more"></a><h2 id="1-Error-实例对象"><a href="#1-Error-实例对象" class="headerlink" title="1. Error 实例对象"></a>1. Error 实例对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'信息'</span>);</span><br><span class="line">err.message; <span class="comment">// 错误提示信息</span></span><br><span class="line">err.name; <span class="comment">// 错误名称（非标准属性）</span></span><br><span class="line">err.stack; <span class="comment">// 错误的堆栈（非标准属性）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最小动画时间间隔</title>
      <link href="2019/04/07/%E6%9C%80%E5%B0%8F%E5%8A%A8%E7%94%BB%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/"/>
      <url>2019/04/07/%E6%9C%80%E5%B0%8F%E5%8A%A8%E7%94%BB%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹跳加载动画</title>
      <link href="2018/11/22/%E5%BC%B9%E8%B7%B3%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/"/>
      <url>2018/11/22/%E5%BC%B9%E8%B7%B3%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>创建反复加载程序动画：</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><span class="blog-title-color">HTML<span></span></span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bouncing-loader"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><span class="blog-title-color">CSS<span></span></span></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> bouncing-loader &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3rem</span> <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#8385aa</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: bouncing-loading <span class="number">0.6s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>提升网页加载速度的黄金法则</title>
      <link href="2018/10/15/%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E7%9A%84%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/"/>
      <url>2018/10/15/%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E7%9A%84%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>本文内容较长，欢迎关注和收藏。</p><p>很多研究表明，用户最满意的网站加载时间是在 2s 以内。用户能够忍受的加载时间，大约是 6~8 秒。也就是说，如果一个网站加载时间超过 8 秒，绝大部分用户会选择离开。</p><p>据相关资料表明，谷歌，亚马逊，雅虎三家公司曾给出这样的数据：</p><ul><li>Google 网站显示 10 条搜索结果，页面载入时间大约是 0.4 秒，显示 30 条搜索结果，页面载入需要 0.9 秒，后者使得谷歌总的流量和收入减少 20%;</li><li>Amazon 每增加 100ms 网络延迟，收入下降 1%；</li><li>雅虎如果有 400ms 延迟，流量下降 5%-9%。</li></ul><p>以上可知，网站的加载速度，严重影响了用户体验，也决定了一个网站的生存。</p><blockquote><p><strong>性能黄金法则</strong>：只有 10%-20%的最终用户响应时间花在了下载 HTML 文档上，其余 80%-90%时间花在下载页面中的所有组件上。</p></blockquote><p>那么，80%-90%的时间花在了哪里了呢？下面，本文总结 web 前端性能优化的方式，希望能帮到您，欢迎关注和收藏。</p><h3 id="一、尽量减少-HTTP-请求"><a href="#一、尽量减少-HTTP-请求" class="headerlink" title="一、尽量减少 HTTP 请求"></a>一、尽量减少 HTTP 请求</h3><ol><li><p>合并脚本和样式表</p><p>将多个脚本或者样式表合并为一个文件，可以减少 http 请求数量，缩短加载时间。当然，合并文件也需要权衡利弊，如果用户只访问一个页面，但是一次性把所有的页面的样式文件和脚本加载进来，反而增加了下载量。</p></li><li><p>使用字体图标</p><p>页面中每有个&lt;img>标签，就会多一个 http 请求。在一些使用简单图片的地方，尽量使用字体图标代替，这样可以有效减少 http 请求。</p></li><li><p>CSS 雪碧图</p><p>CSS Sprites 在国内很多人叫 css 精灵，是一种网页图片应用处理方式。它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，这样一来，当访问该页面时，载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。对于当前网络流行的速度而言，不高于 200KB 的单张图片的所需载入时间基本是差不多的，所以无需顾忌这个问题。</p><p>CSS Sprites 其实就是把网页中一些背景图片整合到一张图片文件中，再利用 CSS 的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position 可以用数字精确的定位出背景图片的位置。</p></li><li><p>图片地图</p></li></ol><h3 id="二、使用-CDN-内容分发网络"><a href="#二、使用-CDN-内容分发网络" class="headerlink" title="二、使用 CDN(内容分发网络)"></a>二、使用 CDN(内容分发网络)</h3><h3 id="三、为文件头指定-Expires-或-Cache-Control，使内容具有缓存性。"><a href="#三、为文件头指定-Expires-或-Cache-Control，使内容具有缓存性。" class="headerlink" title="三、为文件头指定 Expires 或 Cache-Control，使内容具有缓存性。"></a>三、为文件头指定 Expires 或 Cache-Control，使内容具有缓存性。</h3><h3 id="四、压缩组件"><a href="#四、压缩组件" class="headerlink" title="四、压缩组件"></a>四、压缩组件</h3><h3 id="五、将样式表放在头部"><a href="#五、将样式表放在头部" class="headerlink" title="五、将样式表放在头部"></a>五、将样式表放在头部</h3><h3 id="六、将脚本放在底部"><a href="#六、将脚本放在底部" class="headerlink" title="六、将脚本放在底部"></a>六、将脚本放在底部</h3><h3 id="七、避免-CSS-表达式"><a href="#七、避免-CSS-表达式" class="headerlink" title="七、避免 CSS 表达式"></a>七、避免 CSS 表达式</h3><h3 id="八、使用外部的-JavaScript-和-CSS"><a href="#八、使用外部的-JavaScript-和-CSS" class="headerlink" title="八、使用外部的 JavaScript 和 CSS"></a>八、使用外部的 JavaScript 和 CSS</h3><h3 id="九、减少-DNS-查找"><a href="#九、减少-DNS-查找" class="headerlink" title="九、减少 DNS 查找"></a>九、减少 DNS 查找</h3><h3 id="十、精简-JavaScript"><a href="#十、精简-JavaScript" class="headerlink" title="十、精简 JavaScript"></a>十、精简 JavaScript</h3><h3 id="十一、避免重定向"><a href="#十一、避免重定向" class="headerlink" title="十一、避免重定向"></a>十一、避免重定向</h3><h3 id="十二、删除重复代码"><a href="#十二、删除重复代码" class="headerlink" title="十二、删除重复代码"></a>十二、删除重复代码</h3><h3 id="十三、配置-ETag"><a href="#十三、配置-ETag" class="headerlink" title="十三、配置 ETag"></a>十三、配置 ETag</h3><h3 id="十四、使用-Ajax-缓存"><a href="#十四、使用-Ajax-缓存" class="headerlink" title="十四、使用 Ajax 缓存"></a>十四、使用 Ajax 缓存</h3><h3 id="十五、懒加载"><a href="#十五、懒加载" class="headerlink" title="十五、懒加载"></a>十五、懒加载</h3><h3 id="十六、预加载"><a href="#十六、预加载" class="headerlink" title="十六、预加载"></a>十六、预加载</h3><h3 id="十七、避免空的-src-和-href"><a href="#十七、避免空的-src-和-href" class="headerlink" title="十七、避免空的 src 和 href"></a>十七、避免空的 src 和 href</h3><h3 id="十八、使用-GET-来完成-AJAX-请求"><a href="#十八、使用-GET-来完成-AJAX-请求" class="headerlink" title="十八、使用 GET 来完成 AJAX 请求"></a>十八、使用 GET 来完成 AJAX 请求</h3>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升工作效率的十条好习惯</title>
      <link href="2018/10/11/%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E5%8D%81%E6%9D%A1%E5%A5%BD%E4%B9%A0%E6%83%AF/"/>
      <url>2018/10/11/%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E5%8D%81%E6%9D%A1%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<p>本文翻译自<a href="https://www.linkedin.com/pulse/20140721065309-64875646-10-timeless-work-habits-to-boost-your-productivity-today" target="_blank" rel="noopener">Bernard Marr</a></p><p>在当下这个瞬息万变的社会里，人人都习惯于追求更快、更好、更简洁的生活与工作方式。因而“效率”一词也颇受关注。</p><p>可以很肯定的说，好习惯能带来高效率。以下就让我们分享几条经典又有用的工作习惯，照着改变，你也能成为一位高效率工作人士。</p><h3 id="定义每日要事（MIT）"><a href="#定义每日要事（MIT）" class="headerlink" title="定义每日要事（MIT）"></a><span style="color:#d35400">定义每日要事（MIT）<span></span></span></h3><p>每日要事（Most Important Thing），顾名思义就是你每天需要做的事情中最重要的那几件。每天花几分钟定义好今天最重要的 3 – 5 件事情，能帮助提高你的整体效率——毕竟如果你连重要的事情是什么都分不清楚，更何谈高效专注于重要的事情呢？</p><h3 id="拒绝多线程工作"><a href="#拒绝多线程工作" class="headerlink" title="拒绝多线程工作"></a><span style="color:#d35400">拒绝多线程工作<span></span></span></h3><p>支持多线程工作可谓是如今许多设备的标配，而人们的生活也逐渐受此影响，开始倾向于一心多用。不过科学家告诉我们，人类并不能如机器一般完美胜任「多线程操作」，每次专注于一件事情，更有助于高效地完成工作，并且减少错误几率。</p><h3 id="定制晨间例行规划"><a href="#定制晨间例行规划" class="headerlink" title="定制晨间例行规划"></a><span style="color:#d35400">定制晨间例行规划<span></span></span></h3><p>对于许多人来说，如果每天早晨根据固定的、适合自己的安排来度过，就能比较顺利的开始新的一天。如果你在早晨运动过，又吃了一份丰盛的早餐后，效率就会特别高，那么，请着重将晨间运动与美味早餐列进晨间的例行规划中，让这些因素保持其积极作用。同理，你也可以相应地定制午后规划，或者晚间规划。</p><h3 id="简化信息源，保证高效输入"><a href="#简化信息源，保证高效输入" class="headerlink" title="简化信息源，保证高效输入"></a><span style="color:#d35400">简化信息源，保证高效输入<span></span></span></h3><p>不得不说现在是个信息爆炸的时代，有些人手上放不下报纸，眼里也不错过社交媒体的种种讯息，可铺天盖地而来的讯息哪里能都接收完整呢？不断吸收的同时，也常常不经意输入了许多无关、无意义的资讯。</p><p>那么，如何让信息输入更加高效呢？首先，精简各类信息源，留下最重要、最有价值的就好。其次，充分利用 RSS 订阅工具，如 Hootsuite 及其他支持离线阅读的 App。</p><h3 id="保持简洁输出"><a href="#保持简洁输出" class="headerlink" title="保持简洁输出"></a><span style="color:#d35400">保持简洁输出<span></span></span></h3><p>写报告、写邮件的时候，谨记简洁之道，比起洋洋洒洒的美文，直击重点才是最为高效的表达方式。写邮件时，最好在 5 句话之内表达清楚自己的意思。</p><h3 id="做重要的事"><a href="#做重要的事" class="headerlink" title="做重要的事"></a><span style="color:#d35400">做重要的事<span></span></span></h3><p>在经典作品《高效能人士的七个习惯》中，作者 Steven Covey 向人们展示了时间管理的四个象限——紧急又重要的、不紧急但重要的、紧急却不重要的、以及不紧急也不重要的。而我们最应该花时间的，正是那些不紧急但重要的事情，才能保证重要的事情有足够的时间来完成，而非匆忙之间草草带过。</p><h3 id="集中处理同质任务"><a href="#集中处理同质任务" class="headerlink" title="集中处理同质任务"></a><span style="color:#d35400">集中处理同质任务<span></span></span></h3><p>简言之，就是通过集中在某个时间处理同样的事情，来避免自己原本的工作流程被打断。即时查看那些时不时弹出的邮件、短信，不免会打断自己的工作节奏。集中在规划好的时间来统一查看，有助于提高效率。</p><h3 id="删减与委派"><a href="#删减与委派" class="headerlink" title="删减与委派"></a><span style="color:#d35400">删减与委派<span></span></span></h3><p>工作中每天要做的事情很多，然而有些是不必要的，可以删减掉；有些是能够借助工具、交由技术完成的；有些则是不需要你本人监督的，可以移交给其他适合的人完成。</p><h3 id="离线工作"><a href="#离线工作" class="headerlink" title="离线工作"></a><span style="color:#d35400">离线工作<span></span></span></h3><p>联网工作很方便、但也存在许多干扰因素。如果你容易查着资料、看个新闻就走神了，那么还是建议选择离线工作来保证高效率。</p><h3 id="最先做「最不想做的」"><a href="#最先做「最不想做的」" class="headerlink" title="最先做「最不想做的」"></a><span style="color:#d35400">最先做「最不想做的」<span></span></span></h3><p>把最不想做、最容易拖延的事情安排在最前面。当不想做的事情统统都完成后，它们也不会在你脑海里持续浮现干扰你的工作心情了。</p><p>请相信，提高效率并不一定需要制定多么完整、多么高大上的系统框架，掌握以上这些有用又不耗时的好习惯，你也能够成为高效能人士。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对javascript的toString()的深入研究</title>
      <link href="2018/10/09/toString/"/>
      <url>2018/10/09/toString/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript对象</title>
      <link href="2018/10/08/javascript%E5%AF%B9%E8%B1%A1/"/>
      <url>2018/10/08/javascript%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>可写 writable</p></li><li><p>可枚举 enumerable</p></li><li><p>可配置 configurable</p></li></ul><p>在 ECMAScript 5 之前，通过代码给对象创建的所有属性都是可写，可枚举，可配置的。</p><ul><li>对象的原型 prototype</li><li>对象的类 class</li><li>对象的扩展标记 extensible flag ， 指明了是否可以向改对象添加新属性</li></ul><ul><li><p>内置对象</p><p>数组，函数，日期，正则表达式等</p></li><li><p>宿主对象</p></li><li><p>自定义对象</p></li><li><p>自有属性</p></li><li><p>继承属性</p></li></ul><ul><li><p>创建对象</p><p>对象直接量，关键字 new，和 Object.create() (来自 ECMAScript 5)</p></li><li><p>对象直接量</p><p>属性名可以是 javascript 的标识符也可以是字符串直接量（包括空字符串）。属性值可以是任意类型的 javascript 表达式。</p><p>属性名如果是保留字或包含特殊字符，需要用引号引起来。（ES3 中）</p></li><li><p>通过 new 创建对象</p></li><li><p>Object.create()</p></li></ul><ul><li><p>原型</p><p>每一个 javascript 对象（null 除外），都和另一个对象相关联。“另一个”对象就是原型，每一个对象都从原型继承属性。</p><p>所有通过对象直接量创建的对象都具有同一个原型对象，并且可以通过 <strong>Object.prototype</strong>获得对原型对象的引用。通过 new 和构造函数调用创建的对象的原型就是构造函数的<strong>prototype</strong>属性的值。因此，同使用<strong>{}</strong>一样，new Object() 创建的对象继承自 Object.prototype,new Array()继承自 Array.prototype,new Date()的原型是 Date.prototype</p><p>没有原型的对象为数不多，Object.prototype 就没有原型，它不继承任何属性。其他原型对象都是普通对象。</p><p>Date.prototype 的属性继承自 Object.prototype</p></li></ul><ul><li>序列化和反序列化</li></ul><ul><li><p>对象的方法</p><p>toString()</p><p>toLocaleString()</p><p>toJSON()</p><p>valueOf()</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Set数据结构</title>
      <link href="2018/09/26/set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2018/09/26/set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>[TOC]</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6 提供了新的数据接口 <strong>Set</strong>。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用于生成 Set 数据接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> s.add(item));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 4 5 3</span></span><br></pre></td></tr></table></figure><p>上面代码通过 <strong>add</strong> 方法向 Set 结构添加成员，结果表明 Set 结构不会添加重复的值。</p><p>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构） 作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 4]);</span><br><span class="line">[...<span class="keyword">set</span>]; // [1,2,3,4]</span><br><span class="line"></span><br><span class="line">// demo2</span><br><span class="line">const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);</span><br><span class="line">items.size; // 5</span><br><span class="line"></span><br><span class="line">// demo3</span><br><span class="line">const <span class="keyword">set</span> = new Set(document.getElementsByClassName('red'));</span><br><span class="line"><span class="keyword">set</span>.size; // 4</span><br><span class="line"></span><br><span class="line">// demo4</span><br><span class="line">const <span class="keyword">set</span> = new Set();</span><br><span class="line">document.getElementsByClassName('red').forEach(item =&gt; <span class="keyword">set</span>.add(item));</span><br><span class="line"><span class="keyword">set</span>.size; // 4</span><br><span class="line"></span><br><span class="line">// 去除数组重复成员的方法</span><br><span class="line">[...new Set(array)];</span><br><span class="line"></span><br><span class="line">// 去除数组重复成员的方法2</span><br><span class="line">Array.from(new Set(array)); // Array.from方法可以将Set结构转为数组。</span><br></pre></td></tr></table></figure><p>向 Set 加入值的时候，不会发生类型转换。 5 和 “5”是不同的值。Set 内部判断两个值是否相等，使用的算法叫做 “<strong>Same-value-zero equality</strong>” , 类似于精确相等运算符（<strong>===</strong>），主要区别是 <strong>NaN</strong>等于自身，而精确运算符认为<strong>NaN</strong>不等于自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">let a = NaN;</span><br><span class="line">let b = NaN;</span><br><span class="line"><span class="keyword">set</span>.add(a);</span><br><span class="line"><span class="keyword">set</span>.add(b);</span><br><span class="line"><span class="keyword">set</span>; // Set &#123;<span class="literal">NaN</span>&#125;</span><br></pre></td></tr></table></figure><p>两个对象总是不相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let set = new Set();</span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size; // 1</span><br><span class="line"></span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size; // 2</span><br></pre></td></tr></table></figure><h2 id="Set-的实例属性和方法"><a href="#Set-的实例属性和方法" class="headerlink" title="Set 的实例属性和方法"></a>Set 的实例属性和方法</h2><p>Set 结构的实例有一下属性。</p><ul><li><strong>Set.prototype.constructor </strong>: 构造函数，默认就是 Set 函数</li><li><strong>Set.prototype.size </strong>: 返回 Set 实例的成员总数</li></ul><p>Set 实例的方法分为两大类：操作方法和遍历方法。</p><h3 id="4-个操作方法"><a href="#4-个操作方法" class="headerlink" title="4 个操作方法"></a>4 个操作方法</h3><ul><li><strong>add(value)</strong> : 添加某个值，返回 Set 结构本身</li><li><strong>delete(value)</strong> : 删除某个值，返回一个布尔值，表示是否删除成功。删除一个不存在的值，返回 false</li><li><strong>has(value)</strong> : 返回一个布尔值，表示该值是否为 Set 成员</li><li><strong>clear()</strong> : 清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">1</span>)</span><br><span class="line">  .add(<span class="number">2</span>)</span><br><span class="line">  .add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">s.size; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.has(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="4-个遍历操作"><a href="#4-个遍历操作" class="headerlink" title="4 个遍历操作"></a>4 个遍历操作</h3><ul><li><p><strong>keys()</strong> : 返回键名的遍历器</p></li><li><p><strong>values</strong> (): 返回键值的遍历器</p></li><li><p><strong>entries()</strong> : 返回键值对的遍历器</p></li><li><p><strong>forEach()</strong> : 使用回调函数遍历每个成员</p></li></ul><p>Set 的遍历顺序就是插入顺序。</p><p>由于 Set 结构没有键名，只有键值（或者说两者相同），所以 keys 方法和 values 方法的行为完全一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set(['red', 'green', 'blue']);</span><br><span class="line"></span><br><span class="line">for (let item of <span class="keyword">set</span>.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.entires()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ['red', 'red']</span></span><br><span class="line"><span class="comment">// ['green', 'green']</span></span><br><span class="line"><span class="comment">// ['blue', 'blue']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.forEach((value, key) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">':'</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// red:red</span></span><br><span class="line"><span class="comment">// green：green</span></span><br><span class="line"><span class="comment">// blue:blue</span></span><br></pre></td></tr></table></figure><h4 id="遍历的应用"><a href="#遍历的应用" class="headerlink" title="遍历的应用"></a>遍历的应用</h4><p>扩展运算符 <strong>(…)</strong>内部 使用 <strong>for…of</strong>循环，所以也可以用于 Set 结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 4]);</span><br><span class="line">let arr = [...<span class="keyword">set</span>];</span><br></pre></td></tr></table></figure><p>用于去重：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];</span><br></pre></td></tr></table></figure><p>数组的<strong>map</strong> 和 <strong>filter</strong>可以间接用于 Set：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line"><span class="keyword">set</span> = new Set([...<span class="keyword">set</span>].map(item =&gt; item * 2));</span><br><span class="line"></span><br><span class="line">let <span class="keyword">set</span> = new Set([1, 2, 3, 4, 5]);</span><br><span class="line"><span class="keyword">set</span> = new Set([...<span class="keyword">set</span>].filter(item =&gt; item % 2 == 0));</span><br></pre></td></tr></table></figure><p>实现并集、交集 和 差集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> b.has(item)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> ！b.has(item)))</span><br></pre></td></tr></table></figure><p>目前没有办法直接改变 Set 中的值，不过可以通过遍历间接改变 Set 中的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1,2,3]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> = new Set([...<span class="keyword">set</span>].map(val =&gt; val * 2);</span><br><span class="line"><span class="keyword">set</span> = new Set(Array.from(<span class="keyword">set</span>).map(val =&gt; val * 2));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript问题收集</title>
      <link href="2018/09/21/javascript%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
      <url>2018/09/21/javascript%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<ol><li>值类型和引用类型</li><li><p>typeof 运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>; <span class="comment">//'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log; <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure><blockquote><p>typeof 只能区分值类型的详细类型</p></blockquote></li><li><p>变量计算-强制类型转换</p><ul><li><p>字符串拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span> + <span class="number">10</span>; <span class="comment">//110</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">100</span> + <span class="string">'10'</span>; <span class="comment">// '10010'</span></span><br></pre></td></tr></table></figure></li><li><p>== 运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> == <span class="string">'100'</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">''</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>if 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> (c) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> &amp;&amp; <span class="number">0</span>; <span class="comment">//0</span></span><br><span class="line"><span class="string">''</span> || <span class="string">'abc'</span>; <span class="comment">//'abc'</span></span><br><span class="line">!<span class="built_in">window</span>.abc; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个变量会被当做 true 还是 false</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!a);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>何时使用 === 和 ==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj.a == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里相当于  obj.a === null || obj.a === undefined</span></span><br><span class="line">  <span class="comment">// 这是jquery 源码中推荐的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JS 中的内置函数</p><ul><li>Object</li><li>Array</li><li>Boolean</li><li>Number</li><li>String</li><li>Function</li><li>Date</li><li>RegExp</li><li>Error</li></ul></li><li><p>JS 按照存储方式区分变量类型</p><p>值类型 和 引用类型</p><p>区分： 指针 共用内存块</p></li></ol><p>7) 如何理解 JSON</p><p>   JSON 是一个 JS 对象 ，同时也是一种数据格式</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;&#125;'</span>)</span><br><span class="line"><span class="built_in">JSON</span>.stringify)(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>8) 哪些值会被转换成 false</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span>;</span><br><span class="line"><span class="number">0</span>;</span><br><span class="line"><span class="literal">NaN</span>;</span><br><span class="line"><span class="literal">undefined</span>;</span><br><span class="line"><span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>9) 判断当前代码运行环境是否为严格模式</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strict = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="keyword">this</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>   根据 ECMAScript 3 和非严格的 ECMAScript 5 对函数调用的规定，调用上下文（this 的值）是全局对象。然而，在严格模式下，调用上下文则是 undefined。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用CSS实现分页打印</title>
      <link href="2018/09/16/%E5%88%A9%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%89%93%E5%8D%B0/"/>
      <url>2018/09/16/%E5%88%A9%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>最近碰到一个需求，需要前端将在一个页面内调用浏览器的 window.print()方法，打印当前页面。但是呢，需要将三个 DIV 分页打印：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:290mm"</span>&gt;</span>我是封面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:290mm"</span>&gt;</span>我是目录，你不知道我的内容有多长<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是正文，我需要从一个新页面开始展示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开始我想到的办法是，将前两个 div 的高度设置为 290mm(A4 纸的高度)，如上述代码。这样的话，他们正好各占据一面，正文自动在新页面开始，但这只适用于目录不超过一页的情况，而且必须是 A4 纸打印，而且，290mm 是 A4 纸的高度，你不知道用户会不会设置页边距，页边距会设置多少。显然这种方式治标不治本。</p><p>后来，我发现可以使用 css 的 <strong>page-break-after:always</strong> 来控制在某个 DIV 之后新开一个页面，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"page-break-after:always"</span>&gt;</span>我是封面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"page-break-after:always"</span>&gt;</span>我是目录，你不知道我的内容有多长<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是正文，我需要从一个新页面开始展示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话，无论 div 有多长，在它之后一定会新开一个页面再打印。就避免了计算高度的问题。完美解决我的问题。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈影响力的六大因素</title>
      <link href="2018/09/13/%E8%B0%88%E5%BD%B1%E5%93%8D%E5%8A%9B%E7%9A%84%E5%85%AD%E5%A4%A7%E5%9B%A0%E7%B4%A0/"/>
      <url>2018/09/13/%E8%B0%88%E5%BD%B1%E5%93%8D%E5%8A%9B%E7%9A%84%E5%85%AD%E5%A4%A7%E5%9B%A0%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>工作两年有余，一直想着需要提高自己各方面的能力。除了在开发技术上面不断提高，在软技能方面也在想办法提高自己。</p><p>最近在有意提高自己的影响力，除了工作中多参与技术交流，自己也开通了自己的微信公众号（前端有料）。提高自己的过程很艰难，但自己得坚持下去。想要登高看日出，谁不得经历一步一步艰难的攀登呢？</p><p>最近读到一篇关于影响力的文章，解密影响力的六大因素，分享给大家。<br><a href="https://www.jianshu.com/p/d0b480c4f50f" target="_blank" rel="noopener">解密影响力六大因素，教你提升自身影响力。</a></p><blockquote><blockquote><p>现在社会的发展，我们都渴望得到他人的尊重和认同，更需要与他人形成合作的双赢关系，可是在正常的工作生活中总是把握不准如何来提升自身的影响力，希望他人都可以支持自己的观点和想法，从而让自己的个人选择利益最大化，今天给大家介绍下，提升影响力的六大因素。</p><p>一、互惠原理，顾名思义，这是最有效的因素，什么意思呢？就是你要先给别人好处，让别人感受到了实惠，一定要记住，不是你付出了就完事，关键是要让对方感受到你付出了使得自己得到了好处，这个样，在对方的心里就会形成一种不平衡，通俗点就是良心不安，总想着办法给你点补偿，哪怕是精神上的，这个原理应用的范围可广了，与朋友、与领导、与合作伙伴等都可以运用来实现自己的影响力，从而让对方按照自己的思路给出你最想要的结果，举个例子吧，你去追一个女孩，假设这个女孩对你并不花痴，只是觉得并不反感你，你突然给她送了 999 朵玫瑰，出于互惠的原理，她怎么也得和你出来吃个饭啥的，即使她对你并没有感觉，但是通过接触深一步了解后，总会有概率成功的，即使不成功她也会想别的方法把你的恩惠变相的回还给你，这样你也就知道不用浪费时间了，这样效率多高。</p><p>二、承诺和一致性，它的意思是说人人都有一种言行一致的愿望，就是说的出做得到，得要面子，你要是能通过方法让对方按照你的想法把要做的事情说出来，那就省了你费功夫去督促他了，他为了自己的面子也得把那件事情给办好了，想想自己，在日常的生活工作中有没有这种经历，在聊天谈话的过程中，为了一时的装 X，把自己埋入了万劫不复，就像小品郭冬临买火车票表演的那样，给领导吹了牛，说自己有关系可以搞到卧铺票，自己必须得去排队买，这就是言行一致的威力，你要想提升自己的影响力，那就想办法让对方说出你想要的结果，这样就行了，即使没做成，他也会对你有愧疚的。</p><p>三、社会认同原理   在判断何为正确时，我们会根据别人的意见行事，这也是从众效应的一种表现形式，这种影响是无声无息的，每个人甚至是完全无意识的、条件反射式的，当所有人都说你手里的鸡蛋是黑色的时候，你肯定是会受到极大的影响，一个人说的时候你也许会坚持，两个人说的时候你会坚持，三个人说的时候你就会动摇，来上几十个人说那么说，你就得怀疑自己的眼睛了，必须马上去医院就医，已经病入膏肓了，这就是你，别看别人，太容易受到他人的影响，还记得 2000 年之前传说的世界末日吗，当初是不是有点恐慌了，其实根本就没有根据，只不过是说的人多了，那就让人觉得有道理了。</p><p>四、喜好，这个就更没道理了，你要喜欢一个人会怎么样，智商会将为零，就是这个意思，你在你喜欢的人面前就是巴甫洛夫实验中那个摇铃铛就流口水的狗狗，已经形成条件反射了，也就是颜值反射，花痴，说什么都不过分，只能说颜值高的人被喜欢的概率大，进而他的影响力也容易做大，有没有讨厌一个人，感觉他说的什么都是错的，即使内心知道是对的也不愿支持他，这就是喜好的最基本的解释，当然在个人兴趣、活动、价值观等方面保持一致的话，很容易产生互相的共鸣，这样也会扩大你的影响力，所以说那些成功学的老师最容易的就是找到你内心真实的需求，不断给你放大，让你感觉好像找到了知音，然后不断从你口袋里掏钱，就这么简单，看看自己被坑了多久了。</p><p>五、权威   这个就更好理解了，前几年电视上卖药的，卖裤衩的，卖保健品的都找了名人来做广告，为什么，就是要利用名人的权威效应，即使找了一个演员来做牙膏的广告，都会极大地让牙膏销量提升，这就是影响力，可是你仔细想过没有，他一个演员懂什么牙膏，他自己用不用还是个问题，说什么中药、这配方那配方的，仔细想想能信的智商都不会太高，最近小鲜肉都在接代言和广告，你说他们能专业了？都是花痴重症患者或者是智障人士，当你冷静下来之后，只要用脑子稍微思考下，就会明白，该交的智商税都已交完。。。</p><p>六、稀缺 顾名思义物以稀为贵，从鲁迅先生的文章中龙舌兰的价格都知道了稀缺是提高价值得主要渠道，还记得乔布斯搞的饥饿营销吗，对失去某种东西的恐惧比对得到同一物品的恐惧，更能激发人们的行为，也就是更能影响人们，人们对于稀缺资源的追求是永无止境的，利用稀缺性来影响他人是最有效的手段，你能思考下自己生活中被稀缺性影响的事情吗，比如说卖家说就剩一件了，你会不会就马上刷卡，你要看中的话一定会的，其实还有很大的降价空间，只是你在营造好的稀缺性的影响下，迅速达成了对方的要求，这就是坑。</p><p>影响力的六大因素说完了，与大家分享这个的目的呢就是要大家在日常的工作生活中多思考，多套用上面的因素进行思考，把这些方面都应用到正确的地方，比如说去影响孩子啊，引导孩子正确的学习、活动什么的，可别乱用，刀这东西本来就具备双重属性，只不过看拿在谁的手里，两点建议：首先避免因为被他人影响而做出错误的决策，再次在不违背道德和法律的前提下合理运用原则达到自己的最大利益。希望各位能在日常的生活中好好应用，早日提升个人的影响力。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现水平垂直居中的10种方式</title>
      <link href="2018/09/13/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%8410%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2018/09/13/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%8410%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>实现水平垂直居中，是一道经典的面试题，同时，在平时开发中，也是特别常见的场景。</p><p>在这篇文章中，我将对利用CSS实现水平垂直居中的方法做个总结。</p><h2 id="居中元素宽高固定"><a href="#居中元素宽高固定" class="headerlink" title="居中元素宽高固定"></a>居中元素宽高固定</h2><p>对于居中元素宽高固定的场景，我们先设置以下前提代码，方便理解：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是需要垂直居中的DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .wrap&#123;</span><br><span class="line">        width:300px;</span><br><span class="line">        height:300px;</span><br><span class="line">    &#125;</span><br><span class="line">    .child&#123;</span><br><span class="line">        width:100px;</span><br><span class="line">        height:100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方案1-absolute-margin-auto"><a href="#方案1-absolute-margin-auto" class="headerlink" title="方案1. absolute+ margin auto"></a>方案1. absolute+ margin auto</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方案兼容性好，但是子元素需要有宽高，否则，子元素会撑满父容器。</p><h3 id="方案2-absolute-负margin"><a href="#方案2-absolute-负margin" class="headerlink" title="方案2. absolute+ 负margin"></a>方案2. absolute+ 负margin</h3><p>绝对定位的百分比是子元素左上角相对于父元素的宽高定位，通过设置子元素绝对定位，同时上下各50%，可以实现子元素左上角在父元素中心点。<br>通过margin设置子元素外边距为子元素宽度的一半，可以使子元素向相反的方向偏移，便可以实现居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:-<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方案兼容性好，但是，同样需要知道子元素的宽高。</p><h3 id="方案3-absolute-calc"><a href="#方案3-absolute-calc" class="headerlink" title="方案3. absolute + calc"></a>方案3. absolute + calc</h3><p>利用css3计算属性,可以实现与方案2类似的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点也是需要知道子元素宽高，同时依赖于calc的兼容性。<a href="https://caniuse.com/#search=calc" target="_blank" rel="noopener">点击这里查询calc兼容性。</a></p><h2 id="居中元素宽高不固定"><a href="#居中元素宽高不固定" class="headerlink" title="居中元素宽高不固定"></a>居中元素宽高不固定</h2><p>对于居中元素宽高不固定的场景，我们先设置以下前提代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我的宽高不固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="方案4-absolute-transform"><a href="#方案4-absolute-transform" class="headerlink" title="方案4. absolute + transform"></a>方案4. absolute + transform</h3><p>css3新增的transform，transform的translate属性也可以设置百分比，其实相对于自身的宽和高，所以可以设置translate为-50%，就可以做到居中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">trasform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方案依赖于translate2d的兼容性。<a href="https://caniuse.com/" target="_blank" rel="noopener">点击这里查询兼容性。</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript柯里化</title>
      <link href="2018/09/13/JavaScript%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>2018/09/13/JavaScript%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>javascript 柯里化</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的事件委托</title>
      <link href="2018/05/19/js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>2018/05/19/js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<p>事件委托，顾名思义，就是将本来需要 A 处理的事情，委托给 B 来处理。在 JavaScript 中的事件委托又称事件代理，事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。当然，如果子元素阻止了事件冒泡，那么委托也就没法实现了。</p><p>如何举个例子形容呢：<br>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台 MM 代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台 MM 收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台 MM 也会在收到寄给新员工的快递后核实并代为签收。</p><p>这里其实还有 2 层意思的：</p><p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的 dom 节点是有事件的；</p><p>第二，新员工也是可以被前台 MM 代为签收的，即程序中新添加的 dom 节点也是有事件的。</p><p>下面我们举一个代码例子：</p><p>我们要实现一个需求，当鼠标悬浮在 li 元素上，li 元素背景变成红色，离开时，去掉背景。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</span><br><span class="line">  <span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aLi.length; i++) &#123;</span><br><span class="line">    aLi[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.style.background = <span class="string">'red'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    aLi[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.style.background = <span class="string">''</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们循环遍历每一个 li 元素，并为之加上 mouserover 和 mouseout 事件。这只适用于 li 元素特别少的情况，如果 li 元素特别多，定会引起性能问题。还有一个问题，如果这时候动态添加了一个 li 元素，这个元素是没法响应事件的，因为没有给他绑定任何事件。</p><h3 id="通过事件委托实现"><a href="#通过事件委托实现" class="headerlink" title="通过事件委托实现"></a>通过事件委托实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</span><br><span class="line">    oUl.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = e.target || e.srcElement;</span><br><span class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">"li"</span>)&#123;</span><br><span class="line">        target.style.background = <span class="string">"red"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oUl.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = e.target || e.srcElement;</span><br><span class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">"li"</span>)&#123;</span><br><span class="line">        target.style.background = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，通过 <strong>event.target</strong> 来实现事件委托。这种方法避免了循环，提高了性能。</p><blockquote><blockquote><p>标准浏览器用 event.target，IE 浏览器用 event.srcElement</p></blockquote></blockquote><p>新问题，如果 li 还包含了其他元素怎么办呢，这样 target 就不是 li 了。<br>解决办法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">oUl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = ev.target;</span><br><span class="line">  <span class="keyword">while</span> (target !== oUl) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target.tagName.toLowerCase() == <span class="string">'li'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'li click~'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    target = target.parentNode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="另外一个例子："><a href="#另外一个例子：" class="headerlink" title="另外一个例子："></a>另外一个例子：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"添加"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"remove"</span> <span class="attr">value</span>=<span class="string">"删除"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"move"</span> <span class="attr">value</span>=<span class="string">"移动"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">value</span>=<span class="string">"选择"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不用事件委托：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Add = <span class="built_in">document</span>.getElementById(<span class="string">'add'</span>);</span><br><span class="line">  <span class="keyword">var</span> Remove = <span class="built_in">document</span>.getElementById(<span class="string">'remove'</span>);</span><br><span class="line">  <span class="keyword">var</span> Move = <span class="built_in">document</span>.getElementById(<span class="string">'move'</span>);</span><br><span class="line">  <span class="keyword">var</span> Select = <span class="built_in">document</span>.getElementById(<span class="string">'select'</span>);</span><br><span class="line"></span><br><span class="line">  Add.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'添加'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  Remove.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'删除'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  Move.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'移动'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  Select.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'选择'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用事件委托：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">  oBox.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = ev.target || ev.srcElement;</span><br><span class="line">    <span class="keyword">if</span> (target.nodeName.toLocaleLowerCase() == <span class="string">'input'</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (target.id) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">          alert(<span class="string">'添加'</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'remove'</span>:</span><br><span class="line">          alert(<span class="string">'删除'</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'move'</span>:</span><br><span class="line">          alert(<span class="string">'移动'</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'select'</span>:</span><br><span class="line">          alert(<span class="string">'选择'</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitflow工作流</title>
      <link href="2018/02/02/gitflow%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>2018/02/02/gitflow%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
